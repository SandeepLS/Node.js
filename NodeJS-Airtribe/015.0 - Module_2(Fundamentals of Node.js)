Module:-2 video=1(Fundamental of NodeJS):-
What is NodeJS
Single-threaded
Why NodeJS
Blocking/Non-Bloocking
nvm concept

*) npm init [To create a new Backent project, we will get package.json]
   package.json has Domain name, which version we are using, some dependencies.
*) npm i axios [this is a third party code, we can use it just by doing command]
    when we install axiso, we will get extra 2 files, package-lock.json & node_modules.
    The node_modules:- folder is where npm stores all the installed dependencies (and their dependencies) for your project.
    package-lock.json:- A file automatically generated by npm when dependencies are installed. 
                        It provides a precise record of the exact dependency tree and their versions used in your project.
                        It Helps track the dependency tree's state and makes debugging easier if issues arise due to updates.

Aspect	            node_modules	                                    package-lock.json
What            it is	Directory containing installed packages.	File that locks the exact dependency tree.
Purpose	        Makes dependencies usable in the project.	        Ensures exact versions for reproducibility.
Generated When	Created during npm install.	                        Created or updated during npm install.
Size	        Can be large (all dependency files).	            Small, just metadata about dependencies.

*) axios:-
    Axios is a popular JavaScript library used to make HTTP requests. 
    It is widely used in both client-side and server-side JavaScript applications to interact with APIs or other web services. 
    Below are its use cases and benefits:
    Examples:- 
    1. Fetching Data from APIs
    Axios is commonly used to send GET requests to fetch data from APIs.
    axios.get('https://api.example.com/data')
      .then(response => {
        console.log(response.data);
      })
      .catch(error => {
        console.error(error);
      });
    OR
    const axios = require('axios');    //Normal JS     OR
    import axios from 'axios';        //m.js(module exo-system) & also we have to mention in package.json "type":"module", It is a ES6 module syntax.
    const main = async () =>{
        const data = await axios.get('https://jsonplaceholder.typicode.com/users');
        console.log(data);
    }
    main();

    2. Sending Data to APIs
    You can use Axios to send POST, PUT, or PATCH requests to submit or update data.
    axios.post('https://api.example.com/data', {
      name: 'John',
      age: 30
    })
    .then(response => {
      console.log(response.data);
    })
    .catch(error => {
      console.error(error);
    });

    3. Handling Authentication
    4. File Uploads
    5. Downloading Files
    6. Customizing Requests
    7. Global Request and Response Interceptors
    8. Retry Failed Requests

*)What is module, how do we create module.

*) Compare CommonJS vs ES6:-
   CommonJS and ES6 modules are both systems used, to handle module imports and exports in JavaScript, 
   but they have some key differences:
   1. Syntax:
      CommonJS: Uses require() and module.exports. 
                For example, const moduleName = require('module') and 
                             module.exports = { functionName }.
      ES6 Modules: Uses import and export statements. 
                   For example, import { functionName } from 'module' and
                                export function functionName() {}.
   
   2. Execution:
      CommonJS: Modules are loaded synchronously, 
                which means that the code execution is blocked until the module is loaded.
      
      ES6 Modules: Can be loaded asynchronously,
                   which does not block the execution and is beneficial for performance, especially in web environments.
   
   3. Inclusion in Node.js:
      CommonJS: This is the standard module system in Node.js, and has been around for a longer time.
      ES6 Modules: Can be used in Node.js by specifying "type": "module" in package.json or using .mjs file extensions.
   
   4. Usage:
      CommonJS: Primarily used in Node.js environments.
      ES6 Modules: More widely adopted in both browser and Node.js environments due to standardization.

*) .gitIgnore     //1h:22m
   If i want to avoid pushing node_modules dependencies/Unnecessary/Password code to the github:
   we should create .gitignore file. & mention the file which we don't want to push github.
   Ex:>git status
      >git init
      >git status [Here will show, which files are ready to push gitHub, & node_modules are disappear]
   And if we give my code, to another developer, just we inform to him, he just install npm node_modules, then you start your server.
   Ex:>npm i

*)Environment variables in NodeJS:-
   const someVar = "something";
   console.log({someVar});

   console.log({ env: process.env.NODE_ENV});
   Then we have to create .env file [ NODE_ENV:dev ] 
   >node app.js
   {env:undefine}
         OR
   >export NODE_ENV=development   OR >NODE_ENV=dev node app.js   //temporary way in linux
   {env:development}   
         OR
   dotenv website:- we get install command & module.
   > npm install dotenv
   Then we have to import the module: require('dotenv').config() [in app.js]
   >node app.js
   { env: 'dev' }

*)Concurrent & Parallel 1:55m

   


