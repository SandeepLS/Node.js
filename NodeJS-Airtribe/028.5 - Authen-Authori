Module-4: Part-1:-

Authentication:-(Here checking the validity)
we want to check, if the particuler user can access/get this system/not.
Ex: Let's say we go to movie theater, There are 3/more movies playing over, And 
then their is a guard is sitting over, outsaide of the theater, he just checking a ticket.
If this ticket are valid or not, They really don't care, Which movie u are going to,
OR which place you will be tacking Balcani/firstclass  they don't care about that, Hey you are eligible/Not to enter this theater.

Authorization:-
Can you really access this resource/not.
Ex:Once we are in the movie theater, somebody can check, Hey you are eligible to access this balcani/firtClass/bottom seat/not.

MongoDB:- mongoosejs.com/docs/ OR mongoDB
  npm i mongoose : mongoose is have mongoDB library. This library eventually talk to my database.
  .env :- MONGO_URL=
  const mongoose = require('mongoose');
  mongoose.connect(process.env.MONGO_URL, {}).then(() =>{
  //This particuler .then function will be call, when the connection is successfully established.
  })

  check nodejs version:-
    node -v
    nvm list
    nvm use [versionNum]
    npm install
    npm run dev

models:-1:00:00m
models/course.js: this particuler file where am going to define model,
                  The course model which i was going to store in mongoose database.
                  all DB defination logic & how do we go and talking database.

routes/course.js               
const getAllCourses = async(req, res) => {
  const temp = Course.find();
  console.log({temp}) //we get mongo query & it is also promise internally.
  const courses = await temp;
  res.send(courses);
};

-> upto 1:35:00m mongodb.

->models/user.js
->routes/user.js
->async/await
1. Behavior Without await:
   const dbUser = User.create(body); // Returns a promise
   res.send(dbUser); // Sends the promise, not the resolved data

2. With async/await:
   const dbUser = await User.create(body); // Wait for the promise to resolve
   res.send(dbUser); // Send the actual created user data

----------------------------------------------------------------------------------------------------------
Module-4: Part-2:-
->Explained about hashing 11:00 - 24:00s
->routes/user.js
register/:-
Bcrypt 24:00s OR bcrypt npm package(search in google)
npm i bcrypt

->routes/user.js
login/:-
sudo code logic:-
> First i need to find user from database.
> Then i need to find hashPassword
> Then i need to create hash of plain text password.

JWT
Encode: tocken
Decode: Header, Payload, Signature
npm i jsonwebtoken

->routes/course.js:-
validateJWT

->recap:- 1:30:20s

->encription :- 1:51:00s


