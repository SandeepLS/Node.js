What is a SECRET_KEY in JWT:-
The SECRET_KEY is a private string, that the server uses to sign and verify JSON Web Tokens (JWTs).
It plays two essential roles:
1. Signing the Token:
  > When the server creates a JWT using jwt.sign(), it uses the SECRET_KEY, to generate a unique signature.
  > The signature ensures that, the token cannot be tampered with.
  > If someone tries to modify the token data (like the username), the signature will no longer match, and the token becomes invalid.
  
2. Verifying the Token:
  > When the server receives a JWT (e.g., in the /profile route), it uses the same SECRET_KEY, 
    to check the token's signature and validate its integrity.
  > If the SECRET_KEY used to verify doesn't match the one used to sign the token,
    the verification fails, and the token is considered invalid.

------------------------------------------------------------------------------------------------------------
How Does SECRET_KEY Work?
JWT has three parts: Header, Payload, and Signature.
  1. Header: Specifies the algorithm used for signing, like HMAC SHA256.
  2. Payload: Contains the data (e.g., { username: "John" }).
  3. Signature: Ensures the token's integrity, created using:
The SECRET_KEY is only known to the server, ensuring that no one else can generate a valid signature for a JWT.

---------------------------------------------------------------------------------------------------------------
Why is SECRET_KEY Used in Both Places?
1. During Token Creation:
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });
    > Here, the SECRET_KEY is used to sign the token and create its signature.
    > This ensures the token's authenticity and protects it from tampering.

2. During Token Verification:
    const user = jwt.verify(token, SECRET_KEY);
    > Here, the SECRET_KEY is used to verify the signature of the token.
    > If the signature matches, the token is valid, and the server knows it hasn't been tampered with.

---------------------------------------------------------------------------------------------------------------
Why Can't We Omit the SECRET_KEY?
  Without the SECRET_KEY:
  > Anyone could generate fake tokens and access protected resources.
  > The server wouldn’t be able to verify if the token was issued by itself.

----------------------------------------------------------------------------------------------------------------
Illustration
Let’s consider a scenario:
1. User Logs In:
   > The server generates a token:
     const token = jwt.sign({ username: "John" }, "my_secret_key", { expiresIn: "1h" });

2. User Sends Token to Access a Protected Route:
   > The client includes the token in the request header.
     Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

3. Server Verifies Token:
   > The server uses the same SECRET_KEY ("my_secret_key") to check if the token is valid.
     const user = jwt.verify(token, "my_secret_key");

   If valid, the server knows:
    > The token wasn’t tampered with.
    > The user is authenticated.

--------------------------------------------------------------------------------------------------------------
Key Takeaways:
  1. The SECRET_KEY ensures the authenticity and integrity of JWTs.
  2. It’s used to:
      > Sign tokens during creation.
      > Verify tokens during validation.
  3. The same key must be used in both processes.
  4. In Protect route, the SECRET_KEY by using environment variables, not hardcoding.
