AXIOS:-
Axios is a popular JavaScript library, used for making HTTP requests, from web browsers and Node.js.
It simplifies, the process of interacting with APIs and fetching or sending data over HTTP/HTTPS. 
Axios is built on top of the Promise API, making it easy to handle asynchronous operations, in a clean and readable way.

Axios and Fetch are similar, in that both are used to make HTTP requests in JavaScript.

Key Features of Axios:
  1. Supports All HTTP Methods:
  Makes requests using methods like GET, POST, PUT, DELETE, PATCH, etc.
  
  2. Promise-Based:
  Works seamlessly with async/await and .then() for handling asynchronous operations.
  
  3. Automatic JSON Parsing:
  Axios automatically converts JSON data from responses into JavaScript objects.

Why Use Axios?
  Ease of Use: It has Cleaner syntax, compared to the native fetch API.
  Browser Compatibility: Handles older browsers better than fetch.

Ex-1:- npm install axios (Get request)
    const axios = require('axios');
    axios.get('https://jsonplaceholder.typicode.com/posts/1')
      .then(response => {
        console.log(response.data); // Logs the data received from the API
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });

    OR(Using async/await)

    const axios = require('axios');
    (async () => {
        try {
          const response = await axios.get('https://jsonplaceholder.typicode.com/posts/1');
          console.log(response.data);
        } catch (error) {
          console.error('Error:', error);
        }
      })();

Ex-2:- POST Request:
    const axios = require('axios');
    axios.post('https://jsonplaceholder.typicode.com/posts', {
        title: 'Axios Example sandeep',
        body: 'This is an example of a POST request.',
        userId: 1
      })
      .then(response => {
        console.log('Post created:', response.data);
      })
      .catch(error => {
        console.error('Error creating post:', error);
      });
      
3. PUT Request with Axios
  The PUT method is typically used to update an existing resource.
  const axios = require('axios');
  axios.put('https://jsonplaceholder.typicode.com/posts/1', {
    id: 1, // Resource ID
    title: 'Updated Title',
    body: 'This content has been updated using a PUT request.',
    userId: 1
  })
    .then(response => {
      console.log('Resource updated successfully:', response.data);
    })
    .catch(error => {
      console.error('Error updating resource:', error.message);
    });

4. DELETE Request with Axios
  The DELETE method is used to delete a resource.
  const axios = require('axios');
  axios.delete('https://jsonplaceholder.typicode.com/posts/1')
    .then(response => {
      console.log('Resource deleted successfully:', response.status); // Status will typically be 200 or 204
    })
    .catch(error => {
      console.error('Error deleting resource:', error.message);
    });
