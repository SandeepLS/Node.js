Axios and Fetch are similar, in that both are used to make HTTP requests in JavaScript.

Fetch:-
The fetch API is a built-in JavaScript function, that provides a way to make HTTP requests directly from the browser.
It returns a Promise, which resolves to the Response object representing the HTTP response.
    
    Feature    	                    Fetch	                                            Axios
Browser_Support	Built into modern browsers (no installation needed).	Requires installation (npm install axios).
JSON Parsing  	You must explicitly call .json() to parse JSON.	      Automatically parses JSON responses.
Error Handling	Only handles network errors by default.               Handles HTTP and network errors automatically.
                Need to check response.ok for HTTP errors.
Syntax:-
fetch(url, options)
  .then(response => {
    // Handle the response object
  })
  .catch(error => {
    // Handle network errors
  });
url: The URL you are making the request to.
options (optional): An object to configure the request (e.g., method, headers, body).

Example:
1. Get:-
  fetch('https://jsonplaceholder.typicode.com/posts/1')
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json(); // Parse JSON from response
    })
    .then(data => {
      console.log(data); // Process the response data
    })
    .catch(error => {
      console.error('Fetch error:', error);
    });

2. POST:-
  fetch('https://jsonplaceholder.typicode.com/posts', {
    method: 'POST', // HTTP method
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      title: 'Fetch Example',
      body: 'This is an example of a POST request.',
      userId: 1
    })
  })
    .then(response => response.json())
    .then(data => {
      console.log('Post created:', data);
    })
    .catch(error => {
      console.error('Error:', error);
    });

3. PUT Request:
  The PUT method is used to update an existing resource or replace it entirely.
  fetch('https://jsonplaceholder.typicode.com/posts/1', {
    method: 'PUT', // Specify the HTTP method
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      id: 1,
      title: 'Updated Title',
      body: 'This is an updated post using PUT request.',
      userId: 1,
    }),
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json(); // Parse response JSON
    })
    .then(data => {
      console.log('Updated Resource:', data); // Log updated resource
    })
    .catch(error => {
      console.error('Error:', error);
    });

4. DELETE Request:
  The DELETE method is used to delete a resource.
  fetch('https://jsonplaceholder.typicode.com/posts/1', {
    method: 'DELETE', // Specify the HTTP method
  })
    .then(response => {
      if (response.ok) {
        console.log('Resource deleted successfully');
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });

