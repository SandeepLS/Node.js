1. Fetching Data Using async/await, Promises:-
    async Keyword: It Marks, a function as asynchronous.
    await Keyword: Pauses the execution of the function, until the promise resolves or rejects.

    Note: we can not wright await keyword, outside of in async function.
      
    Example:-
    // Simulate a function that fetches user data
    function fetchUserData() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const success = true; // Simulate success or failure
                if (success) {
                    resolve({ id: 1, name: 'John Doe', email: 'john@example.com' });
                } else {
                    reject('Failed to fetch user data');
                }
            }, 2000); // Simulates a 2-second delay
        });
    }
    
    // Async function to handle the promise
    async function getUserData() {
        try {
            console.log('Fetching user data...');
            const user = await fetchUserData(); // Wait for the promise to resolve
            console.log('User Data:', user); // Logs the resolved value
        } catch (error) {
            console.error('Error:', error); // Handles any errors
        } finally {
            console.log('Operation complete.');
        }
    }
    
    // Call the async function
    getUserData();
    
    console.log('This will print before the user data is fetched.');

    O/P:
    Fetching user data...
    This will print before the user data is fetched.
    User Data: { id: 1, name: 'John Doe', email: 'john@example.com' }
    Operation complete.

2. Fetching Data from an API using async/await:-
    Example:- 
    async function fetchUserData() {
        try {
            console.log('Fetching user data...');
            const response = await fetch('https://jsonplaceholder.typicode.com/users/1');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json(); // Parse JSON data
            console.log('User Data:', data);
        } catch (error) {
            console.error('Error fetching user data:', error);
        } finally {
            console.log('Fetch operation complete.');
        }
    }
    
    fetchUserData();
    O/P:
    Fetching user data...
    User Data: { id: 1, name: 'Leanne Graham', username: 'Bret', ... }
    Fetch operation complete.
---------------------------------------------------------------------------------------
