To execute three callback-based functions in parallel, and then execute the next line of code,
you can use Promise.all in combination with util.promisify,
to convert the callback-based functions into promise-based ones.

Here's a solution:
  const util = require('util');
  
  // Example callback-based functions
  function func1(callback) {
      setTimeout(() => callback(null, 'Result from func1'), 1000);
  }
  
  function func2(callback) {
      setTimeout(() => callback(null, 'Result from func2'), 500);
  }
  
  function func3(callback) {
      setTimeout(() => callback(null, 'Result from func3'), 1500);
  }
  
  // Promisify the functions to convert them to promise-based
  const func1Async = util.promisify(func1);
  const func2Async = util.promisify(func2);
  const func3Async = util.promisify(func3);
  
  async function executeInParallel() {
      try {
          // Execute the functions in parallel using Promise.all
          const results = await Promise.all([func1Async(), func2Async(), func3Async()]);
          
          console.log('All functions completed:', results);
  
          // Next line of code to execute after all functions are complete
          console.log('Executing the next line of code...');
      } catch (error) {
          console.error('An error occurred:', error);
      }
  }
  
  executeInParallel();

Explanation:
    util.promisify: Converts callback-based functions into Promise-based functions,
                    enabling the use of await.
    Promise.all: Executes all promises in parallel and resolves when all promises are fulfilled.
                 If any promise is rejected, it will short-circuit and throw the error.
    await: Waits for all promises to resolve, ensuring the next line executes, only after all the tasks are completed.

O/P:
    All functions completed: [ 'Result from func1', 'Result from func2', 'Result from func3' ]
    Executing the next line of code...
----------------------------------------------------------------------------------------------------------------------
Step-by-Step Execution of Callback Functions:-

1. Original Callback Structure:
   Each of the callback-based functions (func1, func2, func3) expects a callback as an argument. 
   When the function completes its asynchronous task (e.g., setTimeout), it calls the callback,
   passing either an error (null in this case) or the result. Example:

   example:
   function func1(callback) {
      setTimeout(() => callback(null, 'Result from func1'), 1000);
   }

   The callback function here acts as a notifier, which will be invoked when the asynchronous operation completes.

2. Converting to Promise-Based Functions:
   Using util.promisify, each callback-based function is wrapped in a Promise.
   Example of how util.promisify works internally:

   example:
    const func1Async = util.promisify(func1);
    
    // Internally, promisify does this:
    const func1Async = () => {
        return new Promise((resolve, reject) => {
            func1((err, result) => {
                if (err) reject(err); // Handle error
                else resolve(result); // Handle success
            });
        });
    };

    > util.promisify automatically creates a promise that listens for the callback's invocation.
    > If the callback is called with an error (e.g., callback(err)), the promise is rejected.
    > If the callback is called with a result (e.g., callback(null, result)), the promise is resolved.

3. Execution in Parallel:
   Using Promise.all, all the Promisified functions are executed concurrently:

  example:
    const results = await Promise.all([func1Async(), func2Async(), func3Async()]);
  > Each of these functions starts execution simultaneously.
  >  Promise.all waits until the promise get rsolve or reject.
