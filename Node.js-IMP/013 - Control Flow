Control Flow in Node.js:-
It refers to the order in which code executes, especially in an asynchronous environment. 
Since Node.js is non-blocking and uses an event-driven model,-
understanding control flow is crucial to writing efficient applications

Types of Control Flow in Node.js
1. Synchronous (Blocking) Execution
  Executes code line by line in order.
  Each operation must complete before moving to the next.
  Here, each statement executes sequentially.
  Ex:
  console.log("Step 1: Start");
  console.log("Step 2: Process");
  console.log("Step 3: End");
  
  O/P:-
  Step 1: Start
  Step 2: Process
  Step 3: End

2. Asynchronous (Non-Blocking) Execution
  Allows multiple operations to execute without waiting.
  Uses callbacks, promises, or async/await to manage execution flow.
  Ex:
  console.log("Step 1: Start");
  
  setTimeout(() => {
      console.log("Step 2: Asynchronous Task");
  }, 2000);  // Runs after 2 seconds
  
  console.log("Step 3: End");
  
  O/P:-
  Step 1: Start
  Step 3: End
  Step 2: Asynchronous Task  (after 2 seconds)
------------------------------------------------------------------
Control Flow Techniques in Node.js:-
Since Node.js heavily relies on asynchronous execution, managing control flow is essential. Here are common approaches:

1. Callbacks (Traditional Approach)
  A function passed as an argument to another function.
  Ex:
  function fetchData(callback) {
      setTimeout(() => {
          callback("Data received");
      }, 2000);
  }
  
  console.log("Fetching...");
  fetchData((data) => {
      console.log(data);
  });
  console.log("Processing...");
  
  O/P:-
  Fetching...
  Processing...
  Data received  (after 2 seconds)

2. Promises (Modern Approach)
  Avoids "callback hell" by chaining .then().
  Handles errors using .catch().
  Ex:
  function fetchData() {
      return new Promise((resolve, reject) => {
          setTimeout(() => {
              resolve("Data received");
          }, 2000);
      });
  }
  
  console.log("Fetching...");
  fetchData().then((data) => {
      console.log(data);
  });
  console.log("Processing...");

3. Async/Await (Best for Readability)
  Built on top of Promises.
  Looks synchronous but runs asynchronously.
  Ex:
  async function fetchData() {
      return new Promise((resolve) => {
          setTimeout(() => {
              resolve("Data received");
          }, 2000);
      });
  }
  
  async function main() {
      console.log("Fetching...");
      let data = await fetchData(); // Waits for the promise to resolve
      console.log(data);
      console.log("Processing...");
  }
  
  main();
