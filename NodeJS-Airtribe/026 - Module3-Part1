If another server is running, check it:-
  >lsof -i :3000
  >kill -9 pastePIDnumber
  
*)Put method:-
  Use PUT when you want to replace, the entire resource with a new one. 
  This means we must include all fields in the request, even if only one field is being updated.
  Example:
  Suppose you have a resource:
  {
    "id": 1,
    "name": "Old Course",
    "rating": 4.0,
    "description": "An old description"
  }
  
  PUT Request: PUT /api/v1/courses/1
  Content-Type: application/json
  {
    "id": 1,
    "name": "Updated Course",
    "rating": 5.0,
    "description": "An updated description"
  }
  Result: The entire resource is replaced, so all fields must be included in the payload.

*)Patch method:-
  Use PATCH when you want to modify specific fields of a resource without affecting others.
  Example:
  Suppose you have the same resource:
  {
    "id": 1,
    "name": "Old Course",
    "rating": 4.0,
    "description": "An old description"
  }
  
  PATCH Request: PATCH /api/v1/courses/1
  Content-Type: application/json
  {
    "rating": 5.0
  }
  
  Result: Only the rating field is updated. The other fields remain unchanged:
  {
    "id": 1,
    "name": "Old Course",
    "rating": 5.0,
    "description": "An old description"
  }

*)Creating new folder for routes:- 45:0s
  All my routes putit into separeate folder.
    app.js:-
      const courseRouter = require('./routes/course')
      app.use('/', courseRouter)
    
    routes/course.js:-
      const express = require('express');
      const router = express.Router();
      const courses = [ ]
      get, getALL, Post, Put, Delete [ Describe the neede code]
      module.exports = router;

  ->routes/course.js:- 45:00s
  ->controllers/course.js:-
  ->debugging:- 1:10:00s, 1:15:00s upto 2:00
    Another way to debugging "dev":"nodemon --inspect-brk app.js"
    chrome://inspect :The URL Where our debugger will be mountain & it as where my sever is running.
      Then click on inspect.

  
